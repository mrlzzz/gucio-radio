/*
  Auto-generated by: https://github.com/pmndrs/gltfjsx
  Command: npx gltfjsx@6.2.16 ipod_classic.glb -t 
  Author: Timothy Ahene (https://sketchfab.com/timothyahene)
  License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
  Source: https://sketchfab.com/3d-models/ipod-classic-13dbe30b0e45408c8bfaddfe6a4e8786
  Title: iPod Classic
*/

import * as THREE from "three";
import React, { useEffect, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import Screen from "./Screen";
import Controls from "./Controls";
import data from "../../data/songs.json";

type GLTFResult = GLTF & {
    nodes: {
        defaultMaterial: THREE.Mesh;
        defaultMaterial_1: THREE.Mesh;
        defaultMaterial_2: THREE.Mesh;
        defaultMaterial_3: THREE.Mesh;
        defaultMaterial_4: THREE.Mesh;
        defaultMaterial_5: THREE.Mesh;
    };
    materials: {
        iPod_Material: THREE.MeshPhysicalMaterial;
    };
};

const AudioPlayerModel = (props: React.JSX.IntrinsicElements["group"]) => {
    const { nodes, materials } = useGLTF("/ipod_classic.glb") as GLTFResult;
    const groupRef = useRef<THREE.Group>(null!);
    const [activeItemIndex, setActiveItemIndex] = useState<number>(0);
    const [screenTypeIndex, setScreenTypeIndex] = useState<number>(0);

    const handleListChange = (delta: number) => {
        setActiveItemIndex(
            (prev) => (prev + delta + data.length) % data.length
        );
    };

    const handleScreenChange = () => {
        if (screenTypeIndex === 0) {
            setScreenTypeIndex(1);
        } else if (screenTypeIndex === 1) {
            setScreenTypeIndex(0);
        }
    };

    const handlers = {
        listChange: handleListChange,
        screenChange: handleScreenChange,
    };

    useEffect(() => {
        const handleKeyDown = (event: KeyboardEvent) => {
            if (event.key === "ArrowLeft") {
                groupRef.current.rotation.y -= 0.05;
            }
            if (event.key === "ArrowRight") {
                groupRef.current.rotation.y += 0.05;
            }
            if (event.key === "ArrowUp") {
                groupRef.current.rotation.x += 0.05;
            }
            if (event.key === "ArrowDown") {
                groupRef.current.rotation.x -= 0.05;
            }
        };
        document.addEventListener("keydown", handleKeyDown);
        return () => {
            document.removeEventListener("keydown", handleKeyDown);
        };
    }, []);

    // useFrame((state, delta) => {
    //     groupRef.current.rotation.y += -delta / 2;
    // });

    return (
        <group ref={groupRef} {...props} dispose={null} scale={3}>
            <group rotation={[-Math.PI / 2, -1.57, -1.58]}>
                <group>
                    <mesh
                        geometry={nodes.defaultMaterial.geometry}
                        material={materials.iPod_Material}
                    />
                    <mesh
                        geometry={nodes.defaultMaterial_1.geometry}
                        material={materials.iPod_Material}
                    />
                    <mesh
                        geometry={nodes.defaultMaterial_2.geometry}
                        material={materials.iPod_Material}
                    />
                    <Screen
                        data={data}
                        activeItemIndex={activeItemIndex}
                        setActiveItemIndex={setActiveItemIndex}
                        screenTypeIndex={screenTypeIndex}
                        setScreenTypeIndex={setScreenTypeIndex}
                    />
                    <mesh
                        geometry={nodes.defaultMaterial_4.geometry}
                        material={materials.iPod_Material}
                    />
                    <mesh
                        geometry={nodes.defaultMaterial_5.geometry}
                        material={materials.iPod_Material}
                    />
                    <Controls handlers={handlers} />
                </group>
            </group>
        </group>
    );
};

useGLTF.preload("/ipod_classic.glb");
export default AudioPlayerModel;
